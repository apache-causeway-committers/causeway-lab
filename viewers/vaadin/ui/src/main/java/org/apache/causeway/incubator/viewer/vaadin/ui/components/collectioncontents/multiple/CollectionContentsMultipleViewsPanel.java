/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
package org.apache.causeway.incubator.viewer.vaadin.ui.components.collectioncontents.multiple;

import com.vaadin.flow.function.SerializableSupplier;

import org.apache.causeway.core.config.CausewayConfiguration;
import org.apache.causeway.core.metamodel.tabular.DataTableInteractive;
import org.apache.causeway.incubator.viewer.vaadin.model.models.EntityCollectionModel;
import org.apache.causeway.incubator.viewer.vaadin.model.models.EntityCollectionModelParented;
import org.apache.causeway.incubator.viewer.vaadin.model.util.ComponentHintKey;
import org.apache.causeway.incubator.viewer.vaadin.ui.components.collection.count.CollectionCountProvider;
import org.apache.causeway.incubator.viewer.vaadin.ui.components.collection.selector.CollectionPresentationSelectorHelper;
import org.apache.causeway.incubator.viewer.vaadin.ui.components.collection.selector.CollectionPresentationSelectorPanel;
import org.apache.causeway.incubator.viewer.vaadin.ui.panels.PanelAbstract;
import org.apache.causeway.viewer.commons.model.components.UiComponentType;
import org.apache.causeway.wicketstubs.api.Component;

/**
 * Subscribes to events generated by
 * {@link CollectionPresentationSelectorPanel},
 * rendering the appropriate {@link UiComponentType#COLLECTION_CONTENTS}
 * view for a backing {@link EntityCollectionModel}.
 */
public class CollectionContentsMultipleViewsPanel
        extends PanelAbstract<DataTableInteractive, EntityCollectionModel>
        implements CollectionCountProvider {

    private static final long serialVersionUID = 1L;

    private static final int MAX_NUM_UNDERLYING_VIEWS = 10;

    private static final String UIHINT_VIEW = EntityCollectionModelParented.HINT_KEY_SELECTED_ITEM;

    private final String underlyingIdPrefix;
    private final CollectionPresentationSelectorHelper selectorHelper;

    private Component selectedComponent;

    private Component[] underlyingViews;

    public CollectionContentsMultipleViewsPanel(
            final String id,
            final EntityCollectionModel model) {
        super(id, model);

        this.underlyingIdPrefix = UiComponentType.COLLECTION_CONTENTS.toString();

        final ComponentHintKey selectedItemSessionAttribute =
                model.getVariant().isParented()
                        ? ComponentHintKey.create(super.getMetaModelContext(), (SerializableSupplier<Component>) this, UIHINT_VIEW)
                        : null;

        selectorHelper = new CollectionPresentationSelectorHelper(
                model, getComponentFactoryRegistry(), selectedItemSessionAttribute);
    }

    /**
     * Build UI only after added to parent.
     */
    @Override
    public void onInitialize() {
        super.onInitialize();
        addUnderlyingViews();
    }

    private void addUnderlyingViews() {

    }

    private void addOrReplace(Component underlyingView) {
    }

    private void setOutputMarkupId(boolean b) {
    }

    @Override
    public Integer getCount() {
        if (selectedComponent instanceof CollectionCountProvider) {
            final CollectionCountProvider collectionCountProvider = (CollectionCountProvider) selectedComponent;
            return collectionCountProvider.getCount();
        } else {
            return null;
        }
    }

    @Override
    public CausewayConfiguration.Viewer.Common getCommonViewerSettings() {
        return super.getCommonViewerSettings();
    }

    @Override
    public CausewayConfiguration.Viewer.Wicket getWicketViewerSettings() {
        return super.getWicketViewerSettings();
    }
}
